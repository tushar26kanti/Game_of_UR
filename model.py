# -*- coding: utf-8 -*-
"""Untitled52.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ugiV_fWUEZ5ZO3VAs9SRlJDNkV5f_m1m
"""

import pandas as pd
import numpy as np

import tensorflow as tf

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder

data = pd.read_csv('D:/Game_of_UR/data/1717618518.csv')

data.head()



label_encoder = LabelEncoder()

data['player'] = label_encoder.fit_transform(data['player'])
data['pid'] = label_encoder.fit_transform(data['pid'])
data['kill'] = label_encoder.fit_transform(data['kill'])
data['completed'] = label_encoder.fit_transform(data['completed'])
data['winner'] = label_encoder.fit_transform(data['winner'])

# Features (X) and labels (y)
features = ['player','pid','start', 'step', 'end', 'kill', 'completed']
X = data[features].values
y = data['winner'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

# Define the model
model = Sequential([
    Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    Dropout(0.2),
    Dense(64, activation='relu'),
    Dropout(0.2),
    Dense(1, activation='sigmoid')  # Assuming 'winner' is binary
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.summary()

# Train the model
history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))

# Save the trained model
model.save('ur_model.h5')

